stages:
  - test
  - build
  - deploy

test:
  image: node:12
  stage: test

  script:
    - yarn install
    - CI=true yarn test --all --colors

build:dev:
  image: node:12
  stage: build

  script:
    - export NODE_OPTIONS="--max-old-space-size=8192"
    - yarn install
    - REACT_APP_VERSION=$(git describe --tags --always --dirty=+) REACT_APP_API_URL=https://api.dev.inowas.com yarn build
    - VERSION=$(git describe --tags --always --dirty=+) && DATE=$(date +%Y-%m-%dT%H:%M:%S) && sed -i "s/@@__VERSION__@@/${VERSION}/g;s/@@__BUILT__@@/${DATE}/g" ./build/index.html

  artifacts:
    paths:
      - build/

  only:
    - dev

deploy:dev:
  stage: deploy
  dependencies:
    - build:dev

  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
    - apt-get install rsync -y
  script:
    - ssh -p22 $SSH_CREDENTIALS_DEVELOPMENT_SERVER "mkdir -p $DEVELOPMENT_PATH.tmp/"
    - rsync -rav -e ssh ./build/ $SSH_CREDENTIALS_DEVELOPMENT_SERVER:/$DEVELOPMENT_PATH.tmp/
    - ssh -p22 $SSH_CREDENTIALS_DEVELOPMENT_SERVER "mv $DEVELOPMENT_PATH $DEVELOPMENT_PATH.old"
    - ssh -p22 $SSH_CREDENTIALS_DEVELOPMENT_SERVER "mv $DEVELOPMENT_PATH.tmp $DEVELOPMENT_PATH"
    - ssh -p22 $SSH_CREDENTIALS_DEVELOPMENT_SERVER "rm -rf $DEVELOPMENT_PATH.old"
  environment:
    name: development
    url: https://dev.inowas.com
  only:
    - dev

build:smart-control:
  image: node:12
  stage: build
  script:
    - yarn install
    - REACT_APP_VERSION=$(git describe --tags --always --dirty=+) REACT_APP_API_URL=https://api.dss.smart-control.inowas.com REACT_APP_USERS_CAN_REGISTER=false REACT_APP_PUBLIC_PROJECTS_ACCESS=false yarn build
    - VERSION=$(git describe --tags --always --dirty=+) && DATE=$(date +%Y-%m-%dT%H:%M:%S) && sed -i "s/@@__VERSION__@@/${VERSION}/g;s/@@__BUILT__@@/${DATE}/g" ./build/index.html
  artifacts:
    paths:
      - build/
  only:
    - tags
  except:
    - master

deploy:smart-control:
  stage: deploy
  dependencies:
    - build:smart-control
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
    - apt-get install rsync -y
  script:
    - ssh -p22 $SSH_CREDENTIALS_SMART_CONTROL_SERVER "mkdir -p $SMART_CONTROL_PATH.tmp/"
    - rsync -rav -e ssh ./build/ $SSH_CREDENTIALS_SMART_CONTROL_SERVER:/$SMART_CONTROL_PATH.tmp/
    - ssh -p22 $SSH_CREDENTIALS_SMART_CONTROL_SERVER "mv $SMART_CONTROL_PATH $SMART_CONTROL_PATH.old"
    - ssh -p22 $SSH_CREDENTIALS_SMART_CONTROL_SERVER "mv $SMART_CONTROL_PATH.tmp $SMART_CONTROL_PATH"
    - ssh -p22 $SSH_CREDENTIALS_SMART_CONTROL_SERVER "rm -rf $SMART_CONTROL_PATH.old"
  environment:
    name: smart-control
    url: https://dss.smart-control.inowas.com
  only:
    - tags
  except:
    - master

build:training:
  image: node:12
  stage: build
  script:
    - yarn install
    - REACT_APP_VERSION=$(git describe --tags --always --dirty=+) REACT_APP_API_URL=https://api.training.inowas.com yarn build
    - VERSION=$(git describe --tags --always --dirty=+) && DATE=$(date +%Y-%m-%dT%H:%M:%S) && sed -i "s/@@__VERSION__@@/${VERSION}/g;s/@@__BUILT__@@/${DATE}/g" ./build/index.html
  artifacts:
    paths:
      - build/
  only:
    - tags
  except:
    - master

deploy:training:
  stage: deploy
  dependencies:
    - build:training
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
    - apt-get install rsync -y
  script:
    - ssh -p22 $SSH_CREDENTIALS_TRAINING_SERVER "mkdir -p $TRAINING_PATH.tmp/"
    - rsync -rav -e ssh ./build/ $SSH_CREDENTIALS_TRAINING_SERVER:/$TRAINING_PATH.tmp/
    - ssh -p22 $SSH_CREDENTIALS_TRAINING_SERVER "mv $TRAINING_PATH $TRAINING_PATH.old"
    - ssh -p22 $SSH_CREDENTIALS_TRAINING_SERVER "mv $TRAINING_PATH.tmp $TRAINING_PATH"
    - ssh -p22 $SSH_CREDENTIALS_TRAINING_SERVER "rm -rf $TRAINING_PATH.old"
  environment:
    name: training
    url: https://training.inowas.com
  only:
    - tags
  except:
    - master

build:prod:
  image: node:12
  stage: build
  script:
    - yarn install
    - REACT_APP_VERSION=$(git describe --tags --always --dirty=+) REACT_APP_API_URL=https://api.dss.inowas.com yarn build
    - VERSION=$(git describe --tags --always --dirty=+) && DATE=$(date +%Y-%m-%dT%H:%M:%S) && sed -i "s/@@__VERSION__@@/${VERSION}/g;s/@@__BUILT__@@/${DATE}/g" ./build/index.html
  artifacts:
    paths:
      - build/
  only:
    - tags
  except:
    - master

deploy:prod:staging:
  stage: deploy
  dependencies:
    - build:prod
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
    - apt-get install rsync -y
  script:
    - ssh -p22 $SSH_CREDENTIALS_STAGING_SERVER "mkdir -p $STAGING_PATH.tmp/"
    - rsync -rav -e ssh ./build/ $SSH_CREDENTIALS_STAGING_SERVER:/$STAGING_PATH.tmp/
    - ssh -p22 $SSH_CREDENTIALS_STAGING_SERVER "mv $STAGING_PATH $STAGING_PATH.old"
    - ssh -p22 $SSH_CREDENTIALS_STAGING_SERVER "mv $STAGING_PATH.tmp $STAGING_PATH"
    - ssh -p22 $SSH_CREDENTIALS_STAGING_SERVER "rm -rf $STAGING_PATH.old"
  environment:
    name: staging
    url: https://staging.inowas.com
  only:
    - tags
  except:
    - master

deploy:prod:production:
  stage: deploy
  dependencies:
    - build:prod
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
    - apt-get install rsync -y
  script:
    - ssh -p22 $SSH_CREDENTIALS_PRODUCTION_SERVER "mkdir -p $PRODUCTION_PATH.tmp/"
    - rsync -rav -e ssh ./build/ $SSH_CREDENTIALS_PRODUCTION_SERVER:/$PRODUCTION_PATH.tmp/
    - ssh -p22 $SSH_CREDENTIALS_PRODUCTION_SERVER "mv $PRODUCTION_PATH $PRODUCTION_PATH.old"
    - ssh -p22 $SSH_CREDENTIALS_PRODUCTION_SERVER "mv $PRODUCTION_PATH.tmp $PRODUCTION_PATH"
    - ssh -p22 $SSH_CREDENTIALS_PRODUCTION_SERVER "rm -rf $PRODUCTION_PATH.old"
  environment:
    name: production
    url: https://dss.inowas.com
  when: manual
  only:
    - tags
  except:
    - master
